* SASS (Syntactically Awesome Style Sheets) -> adalah salah satu dari CSS Pre Processor.

* CSS Pre Processor -> adalah bahasa script yang dikompilasi dalam bentuk 'css' sebelum diterapkan pada file html. CSS Pre Processor ini ada untuk menutupi kekurangan dari css, dengan masing masing dari CSS Pre Processor nya membuat yang namanya:
 - variable, untuk menyimpan warna misalnya. Yang paling populer itu ada Sass, Stylus, dan Less.

 - mixin, untuk membuat serangkaian style yang bisa kita pakai berulang kali, mirip dengan function. bisa disebut custom function.

 - import & uses, untuk membuat file css jadi modular, jadi gampang di kelola. Kalau kita punya 1 file css tidak perlu melakukan import & uses ini, tapi kalau lebih dari 1 file css nya maka kita bisa membagi bagi file css nya sesuai dengan kebutuhan. Misal file css a untuk bagian header, file css b untuk bagian section, file css c untuk bagian sidebar dan seterusnya.
 
 - operator & built-in function, dengan operator kita bisa melakukan operasi matematika, lalu built in function (fungsi bawaan yang dirancang untuk membantu dalam mengelola nilai nilai css secara dinamis, melakukan operasi matematika, mengubah tipe data, dan memodifikasi nilai nilai css.) contoh built-in function: 
    # rgb(), untuk warna.
    # rgba(), untuk warna dengan opacity
    # darken(), untuk menggelapkan sebuah warna dengan mengurangi kecerahannya sebesar presentase yang ditentukan 
    # lighten(), untuk mencerahkan sebuah warna
    # mix(), mencampurkan 2 warna dengan rasio yang ditentukan
    # invert(), membalikkan sebuah warna dengan mengubah komponen rgb nya 
    # round(), membulatkan bilangan koma
    # unit(), mengubah nilai numerik menjadi tipe data yang spesifik seperti pixel, persen atau em.
    # concat(), menggabungkan string

 - nested css, css bersarang untuk mengelompokkan elemen elemen nya.

* Alasan menggunakan Sass:
    - mempermudah penulisan
    - mempermudah pengelolaan
    - memiliki banyak fungsi built-in
    - kita dapat membuat fungsi sendiri
    - kita dapat memodifikasi framework css (bootstrap / materialize)
    - walaupun untuk penggunaan pribadi tidak diperlukan (dengan syarat kita memahami dengan benar mengenai css), tetapi di bidang industri penggunaan Sass ini sangat banyak digunakan.

* Sass menyediakan 2 cara penulisan, yaitu yang tipe nya SASS dan SCSS, keduanya sama sama baik dan bisa digunakan karna nantinya akan dikompilasi menjadi CSS juga, bedanya untuk SASS itu penulisannya benar benar polos tanpa ; atau {}, tetapi untuk SCSS penulisannya mirip dengan CSS.

    Contoh SASS: contoh.sass
        nav
            ul
                margin: 0
                padding: 0
                list-style: none

            li
                display: inline-block

    Contoh SCSS: contoh.scss
        nav {
            ul {
                margin: 0;
                padding: 0;
                list-style: none;
            }

            li {
                display: inline-block;
            }
        }

* Cara install Sass dikomputer kita ada 3 cara:
    - Aplikasi, install sebagai Aplikasi pada komputer kita.
    - Command Line, kita install dengan menggunakan command line. Kita juga harus memberikan perintah untuk melakukan kompilasi secara manual.
    - VS Code Extension, dengan Extension di VS Code kita tetap harus melakukan kompilasi secara manual.

 # Dengan menggunakan aplikasi / Extension Sass ini, kita hanya perlu membuat file scss nya, karna nantinya file tersebut akan dikompilasi menjadi file css, jadi nama file scss nya harus sama dengan nama yang kita masukkan pada tag link di file html nya.

### Cara compile file sass / scss 
    - dengan command line (cmd),
    contoh:
        sass source/stylesheets/index.scss build/stylesheets/index.css

    - dengan vs code extension,
    contoh:
        ketika kita sudah membuat file dengan ekstensi .scss / .sass maka dibagian bawah dari vs code akan muncul text Watch Sass yang berguna untuk melakukan kompilasi file ke bentuk css. File scss / sass tersebut akan terus dikompilasi selama icon Watch Sass nya masih on dan akan melakukan kompilasi ketika kita melakukan save pada file scss / sass nya.


* Alasan untuk tidak menggunakan SASS:
    - Banyak fitur SASS yang sekarang sudah dimiliki oleh CSS
    - Tidak untuk project kecil
    - Styled Component / CSS in JS

* Nesting pada Sass -> membuat hirarki visual yang jelas untuk selector CSS kita.

* Perilaku variable pada Sass:
 - pada variabel yang menggunakan dash ( - ), akan disamakan dengan underscore ( - ), contoh: $primary-color akan sama dengan $primary_color
 
 - varibale di sass memiliki scope seperti global scope dan local scope ( variable yang dideklarasikan di dalam tag tertentu saja )

 - variabel local scope bisa kita ubah paksa menjadi global scope dengan cara menambahkan !global diakhir value variable nya. 
    contoh: $text-color: salmon !global;

- jika ada variable yang memiliki nama yang sama dideklarasikan di scope yang  berbeda, 1 di global dan 1 di local, maka hasilnya akan sama seperti yang dilakukan dengan bahasa pemrograman lain seperti javascript. 
    contoh:
    $text-color: salmon;

    body {
        $text-color: blue;
        color: $text-color; // ini akan tetap berwarna biru

        // kecuali kalau $text-color diberi !global maka nilai salmon akan berubah menjadi blue
        $text-color: blue !global;
        color: $text-color;
    }

    h1 {
        color: $text-color; // ini akan tetap salmon mengikuti variabel global.
    }

* // Map -> mirip object di javascript
    // Berikut ini cara penulisannya:

    $alert: (
    "danger": red,
    "success": green,
    "warning": orange,
    );

    // untuk menggunakan map berikut caranya:
    h1 {
    color: map-get($alert, "success");
    }

* Mixin -> kumpulan style yang dapat kita gunakan berulang-ulang. Cara mengimplementasikan Mixin:
    - @mixin, digunakan ketika kita membuat mixin nya
    - @include, digunakan ketika kita mau memanggil kumpulan style / mixin nya
 
 Contoh mixin:
    // simple mixin
        @mixin inline-list {
            margin: 0;
            padding: 0;
            list-style: none;
            li {
                display: inline-block;
            }
        }

        .header ul {
        @include inline-list();
            li {
                background-color: black;
                padding: 0.7em;
                a {
                color: white;
                    }
                }
            }

    // argument pada mixin dengan parameter default
        @mixin flex-box($direction: row, $space: center) {
            display: flex;
            justify-content: $space;
            align-items: center;
            flex-direction: $direction;
        }

        .container {
            @include flex-box(row-reverse, space-evenly);
            width: 600px;
            height: 400px;
            background-color: #eaeaea;
            .box {
                width: 60px;
                height: 60px;
                background-color: lightgreen;
                text-align: center;
                line-height: 60px;
            }
        }

* Modules -> membuat code sass kita modular / lebih mudah dikelola. Untuk menggunakan modules, kita butuh 2 buah key. Untuk membuat file modules, kita perlu menambahkan underscore ( _ ), karena dengan underscore maka extension sass nya tidak akan memproses file tersebut menjadi file css.
    - @import,
        contoh import:
            @import "modules/mixin";
            @import "modules/header";
            @import "modules/container";
            @import "modules/footer";

    ... Kekurangan menggunakan import sehingga tidak disarankan unutk digunakan bisa di cek melalui documentation. Walaupun memang menggunakan @use juga masih ada kekurangan tetapi disarankan menggunakan @use ketimbang @import.

    - @use, Salah satu kekurangan terbesar dari @use adalah kalau kita tidak bisa menggunakan nya dengan extension dari vs code, jadi harus install dengan aplikasi atau command line, lalu wajib menambahkan PATH ke system variables pc kita. Bisa dicek di documentation nya.

* Flow Control -> mengatur alur kendali dari script SASS kita. Ada 4 cara yaitu:
    - @if, @else, @else if
    - @for
    - @while
    - @each

    Contoh:

    // if
    @mixin profile-pic($size, $circle: false) {
        width: $size;
        height: $size;
        border: 5px solid white;
        box-shadow: 1px 1px 3px rgba(#000, @alpha: 0.3);
    }

    @if $circle {
        border-radius: 50%;
    }

    .square-profile {
        @include profile(200px, $circle: false);
    }
    
    .circle-profile {
        @include profile(80px, $circle: true);
    }

    // else 
    $light-bg: #eaeaea;
    $light-text: #333;
    $dark-bg: #999;
    $dark-text: #ddd;

    @mixin color-mode($lightm-mode: true) {
        @if $light-mode {
            background-color: $light-bg;
            color: $light-text;
        } else {
            background-color: $dark-bg;
            color: $dark-text
        }
    }

    .nav {
        @include color-mode($light-mode: false);
    }

    // else if, for, dan while sama seperti yang ada di bahasa pemrograman lain.

* Built-in function / modules -> fungsi fungsi bawaan yang bisa kita gunakan antara lain:
    - color terdiri dari:
        - adjust
        - complement
        - darken
        - lighten
        - saturate
        - desaturate
        - greyscale
        - mix
        - fade in
        - fade out
    - list
    - map
    - math
    - selector
    - string


-------------------------------------------------------------

*** Catatan berdasarkan website sass bagian Learn. ***

* Variables, digunakan untuk menyimpan suatu nilai yang ingin digunakan selama penggunaan stylesheets. Nilai yang bisa disimpan antara lain colors, font stacks, atau nilai CSS manapun yang mau digunakan secara berulang. Sass menggunakan tanda $ / dollar, untuk membuat sesuatu menjadi variabel. Contoh:

    $font-stack: Helvetica, sans-serif;
    $primary-color: #333;

    body {
        font: 100% $font-stack;
        color: $primary-color;
    }

yang akan menghasilkan file css ketika di compile, menjadi:

    body {
        font: 100% Helvetica, sans-serif;
        color: #333;
    }

Dengan menggunakan variable pada sass, maka kode style css kita bisa menjadi powerful ketika mengerjakan styling dengan brand warna dan membuat warna nya tetap konsisten selama pembuatan web.

* Nesting, ketika menuliskan kode HTML, biasanya kita bisa melihat tampilan hirarki / tumpukkan tag tag HTML yang berbeda tetapi ada di dalam suatu pembungkus / wrap, pada CSS hal ini tidak ada. Dengan sass kita bisa membuat tampilan hirarki yang sama seperti pada HTML. Perlu diingat, jika kode yang dibuat terlalu nested / terlalu dalam hirarki nya, maka kode CSS yang dihasilkan juga akan semakin rumit dan sulit untuk dikelola, ini bisa menyebabkan kesulitan dalam pemeliharaan kode CSS dan umumnya dianggap sebagai bad practice. Berikut contoh style untuk navigasi pada suatu web:

    nav {
        ul {
            margin: 0;
            padding: 0;
            list-style: none;
        }

        li { display: inline-block; }

        a {
            display: block;
            padding: 6px 12px;
            text-decoration: none;
        }
    }

yang akan menghasilkan file css ketika di compile, menjadi:

    nav ul {
        margin: 0;
        padding: 0;
        list-style: none;
    }
    nav li {
        display: inline-block;
    }
    nav a {
        display: block;
        padding: 6px 12px;
        text-decoration: none;
    }

Bisa diperhatikan bahwa selector ul, li dan a berada didalam selector 'nav'. Ini adalah cara yang bagus untuk mengorganisir file CSS dan membuatnya mudah dibaca.

* Partials, seperti namanya yang artinya 'sebagian', kita bisa membuat file sass yang berisikan sedikit snippets dari CSS yang dimasukkan didalam file sass yang lain. Ini adalah cara yang bagus untuk membagi CSS yang digunakan dan membantu agar lebih mudah pengelolaan nya. Sebuah file partial adalah sebuah file sass dengan nama yang diawali dengan 'underscore' / _ . Contoh bisa diberikan nama '_partial.scss. Underscore ini memberitahukan kepada 'sass' bahwa file tersebut hanyalah sebuah file partial dan tidak seharusnya di kompilasi menjadi sebuah file CSS. file file partial sass ini bisa digunakan dengan rule / aturan penulisan '@use'.

* Modules, dengan sass, kita tidak harus menuliskan semua kode CSS nya di dalam 1 file. Kita bisa pisah pisahkan kode nya dengan menggunakan aturan @use, dengan aturan (rule) ini kita bisa memuat file sass yang lain sebagai sebuah module, yang berarti kita bisa arahkan ke variable, mixins, dan functions di dalam file sass kita dengan sebuah 'namespace' berdasarkan nama file nya. Dengan modules ini juga bisa menghasilkan file CSS yang di kompilasi seperti file sass pada umumnya. Berikut adalah contohnya:

    // _base.scss -> file module.
    $font-stack: Helvetica, sans-serif;
    $primary-color: #333;

    body {
        font: 100% $font-stack;
        color: $primary-color;
    }

    // styles.scss -> cara menggunakan file module diatas dengan @use.
    @use 'base';

    .inverse {
        background-color: base.$primary-color;
        color: white;
    }

    yang akan menghasilkan file css ketika di compile, menjadi:

    body {
        font: 100% Helvetica, sans-serif;
        color: #333;
    }

    .inverse {
        background-color: #333;
        color: white;
    }

Bisa diperhatikan kita menggunakan @use 'base'; didalam file styles.scss nya. Ketika menggunakan sebuah file seperti ini, kita tidak perlu memasukkan extensi dari file nya, karna sass nya sudah bisa melakukan hal tersebut. Dan perlu diperhatikan juga bahwa untuk file modules (yang dipisah / partials) ini, kita perlu memberikan nama dengan awalan underscore seperti diatas.

* Mixins, memudahkan kita dalam membuat kelompok kode CSS yang ingin digunakan secara berulang ulang di seluruh website kita. Dengan mixins kita bahkan bisa memberikan nilai agar mixin yang dibuat lebih fleksibel. Berikut contohnya:

    @mixin theme($theme: DarkGray) {
        background: $theme;
        box-shadow: 0 0 1px rgba($theme, .25);
        color: #fff;
    }

    .info {
        @include theme;
    }
    .alert {
        @include theme($theme: DarkRed);
    }
    .success {
        @include theme($theme: DarkGreen);
    }

    yang akan menghasilkan file css ketika di compile, menjadi:

    .info {
        background: DarkGray;
        box-shadow: 0 0 1px rgba(169, 169, 169, 0.25);
        color: #fff;
    }

    .alert {
        background: DarkRed;
        box-shadow: 0 0 1px rgba(139, 0, 0, 0.25);
        color: #fff;
    }

    .success {
        background: DarkGreen;
        box-shadow: 0 0 1px rgba(0, 100, 0, 0.25);
        color: #fff;
    }

Untuk membuat sebuah mixin, kita menggunakan @mixin dan berikan nama mixin nya. Pada contoh diaatas kita memberikan nama mixin theme. Kita juga menggunakan variable $theme sebagai parameter dengan nilai default nya yaitu DarkGray, tetapi parameter tersebut juga bisa kita ubah nilai nya ketika kita menggunakan mixin tersebut. Setelah mixin selesai dibuat, kita bisa menggunakan nya sebagai deklarasi CSS yang di awali dengan @include dan diikuti oleh nama dari mixin nya, seperti contoh diatas. Kita juga bisa memberikan nilai pada parameter / variable dari $theme nya dengan nilai yang lain, ini juga disebut sebagai argument.

* Extend / Inheritance, dengan menggunakan @extend bisa membuat kita membagikan sebuah kumpulan properti CSS dari 1 selector ke selector yang lain. Di dalam contoh dibawah kita akan membuat sebuah style sederhana dari pesan pesan error, warning, dan success menggunakan fitur yang saling berhubungan dengan extend yaitu 'placeholder classes'. Sebuah placeholder class adalah sebuah class bertipe spesial yang hanya mencetak / print ketika dilakukan extend, dan bisa membantu kompilasi kode CSS kita dengan aman dan bersih. Berikut contohnya:

    /* CSS dibawah ini adalah placeholder class dan akan dicetak / print karna %message-shared telah di extend */
    %message-shared {
        border: 1px solid #ccc;
        padding: 10px;
        color: #333;
    }
    
    // CSS dibawah ini adalah placeholder class dan tidak akan dicetak / print karena %equal-heights tidak pernah di extend
    %equal-heights {
        display: flex;
        flex-wrap: wrap;
    }

    .message {
        @extend %message-shared;
    }

    .success {
        @extend %message-shared;
        border-color: green;
    }

    .error {
        @extend %message-shared;
        border-color: red;
    }

    .warning {
        @extend %message-shared;
        border-color: yellow;
    }

    yang akan menghasilkan file css ketika di compile, menjadi:

    /* CSS dibawah ini akan dicetak / print karena %message-shared telah di extend */
    .warning, .error, .success, .message {
        border: 1px solid #ccc;
        padding: 10px;
        color: #333;
    }

    .success {
        border-color: green;
    }

    .error {
        border-color: red;
    }

    .warning {
        border-color: yellow;
    }

Apa yang kode diatas katakan adalah .message, .success, .error dan .warning untuk berperilaku seperti %message-shared. Ini berarti dimanapun %message-shared muncul maka .message, .success, .error, dan .warning akan muncul juga seperti isi dari %message-shared. Sihirnya terjadi ketika CSS selesai dikompilasi, dimana tiap class nya tadi akan mempunyai properti CSS sama seperti %message-shared. Ini membantu kita menghindari penulisan nama class yang banyak pada elemen HTML.

Bisa diperhatikan diatas bahwa %equal-heights tidak dikompilasi, karena %equal-heights tidak pernah di extend.

* Operators, melakukan perhitungan matematika dengan CSS sangat berguna. Sass punya operator matematika standar seperti +, -, *, math.div() dan %. Contoh dibawah ini adalah perhitungan matematika sederhana untuk menghitung lebar article dan aside.

    @use "sass:math";

    .container {
        display: flex;
    }

    article[role="main"] {
        width: math.div(600px, 960px) * 100%;
    }

    aside[role="complementary"] {
        width: math.div(300px, 960px) * 100%;
        margin-left: auto;
    }

    yang akan menghasilkan file css ketika di compile, menjadi:

    .container {
        display: flex;
    }

    article[role=main] {
        width: 62.5%;
    }

    aside[role=complementary] {
        width: 31.25%;
        margin-left: auto;
    }

    Dari contoh diatas, kita sudah membuat sebuah tampilan yang responsive dengan sederhana berdasarkan lebar layar 960px. Melakukan perhitungan dengan sass membantu kita melakukan sesuatu seperti mengambil nilai pixel dan mengubahnya menjadi bentuk persen tanpa banyak usaha.

    -------------------------------------------------------------