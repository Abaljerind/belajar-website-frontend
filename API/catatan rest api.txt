* API -> Application Programming Interface, adalah sekumpulan fungsi, subroutine, protokol komunikasi, atau tools untuk membuat perangkat lunak. Bisa juga disebut, sebuah antarmuka yang berupa kumpulan 'fungsi' yang dapat di 'panggil' / dijalankan oleh program lain. 

* Web API / Web Service, sebuah sistem perangkat lunak yang dibuat untuk mendukung interoperabilitas / interaksi antar 2 aplikasi yang berbeda melalui sebuah jaringan, biasanya menggunakan HTTP. Yang di dalamnya ada 2 API yaitu:
    - SOAP, Simple Object Access Protocol.
    - REST, REpresentational State Transfer.
Dengan membuat Web Service yang khususnya kita buat sekarang adalah REST, kita bisa membuat banyak aplikasi, seperti Web Applications, Legacy Applications, Application servers, Data, Cloud Resources, Partner Applications, Cloud-based Service dan Mobile Applications.

* REST API -> Gaya arsitektural perangkat lunak yang didalamnya mendefinisikan aturan aturan untuk membuat web service.

* URL -> alamat dari sebuah 'resource' yang dapat diakses di internet. contoh: https://www.google.com/

* HTTP Method / Verbs / Endpoints:
 - Get, mengambil Data
 - Post, menambah Data
 - Put, mengubah Data           => tidak bisa menggunakan browser
 - Delete, menghapus Data        => tidak bisa menggunakan browser

* Stateless -> ketidakadaan sebuah 'state' dalam sebuah aplikasi. Jadi,
 - Setiap request HTTP dilakukan secara terisolasi
 - Maksudnya, server tidak boleh menyimpan state apapun mengenai sesi dari client, jadi tidak ada 'sessions' di API. Maksudnya, REST API tidak boleh tau siapa yang sedang login.
 - Setiap request dari client harus berisi semua informasi yang dibutuhkan oleh server, termasuk informasi autentikasi nya, maksudnya setiap kali client mengirim request si client harus mengirim dulu autentikasi nya siapa? client nya itu siapa? / Identitas si client.

* Untuk menerapkan RESTful API harus memenuhi syarat sebagai berikut:
 - harus menggunakan HTTP method yang benar
 - URL / Endpoints nya harus menggunakan 'kata benda', BUKAN kata kerja. Contoh: PUT localhost/ci-app/mahasiswa/38
 - dan harus Stateless

* JSON (Javascript Object Notation) -> sebuah 'file format standar' yang menggunakan tulisan yang dapat dibaca oleh manusia 'untuk pertukaran data', yang didalamnya berisi pasangan antara 'key' dan 'value'.

* JSON -> format pertukaran data tekstual yang sangat ringan. Sintaksnya sangat sederhana dan jelas dibanding XML. JSON dapat digunakan oleh banyak bahasa pemrograman. Tiap bahasa pemrograman tersebut punya cara nya tersendiri untuk berinteraksi dengan JSON. JSON dibuat berdasarkan format object pada Javascript. JSON juga digunakan untuk file konfigurasi (tidak disarankan karna tidak support sintaks komentar). Tipe file eksitensi nya ".JSON"

* JSON tidak boleh memiliki method (function yang ada di dalam suatu object)

* Penulisan JSON:
 { "key" : "value" }

* Tipe data dari 'value' pada JSON:
 - boolean
 - array
 - string
 - object
 - number
 - null

*** Cek cara membuat file json sederhana di folder htdocs di xampp. Untuk mengakses file json dari browser, pastikan xampp sudah menyala dan berjalan, lalu buka chrome dan ketikkan 'localhost' atau '127.xxxxxx', contoh: http://localhost/rest-api/coba.json

* Pada Javascript ada 2 method yang harus dipahami:
 - JSON.stringify(), untuk mengubah object menjadi JSON.
    contoh:
    var data = {
        a: '1',
        b: '2',
        c: '3'
    }

    console.log(JSON.stringify(data));

    hasilnya:
    {"a":"1","b":"2","c":"3"}

 - JSON.parse(), untuk mengubah JSON menjadi object dengan cara me-request file JSON lalu mengubahnya menjadi object (menggunakan XMLHttpRequest)
    contoh:
    var xhr = new XMLHttpRequest();
    xhr.onreadystatechange = function() {
        if( xhr.readyState === 4 && xhr.status === 200 ) {
            var data = JSON.parse(this.responseText);
            console.log(data);
        }
    }
    xhr.open('GET', 'data.json', true);
    xhr.send();

* Cara mengakses JSON ada beberapa cara:
 - ajax -> dengan menggunakan vanila Javascript / Javascript murni yaitu XMLHttpRequest diatas atau bisa pakai JQuery seperti dibawah.

    contoh:
    // mengakses JSON dengan JQuery
    // syaratnya harus ada JQUERY nya, cari jquery cdn di google, lalu pilih yang uncompressed dan paste di file html diatas script kita.
    // hasil dari penggunaan JQuery dibawah adalah object yang sudah di parsing oleh $.getJSON nya.

    $.getJSON("coba.json", function (data) {
        console.log(data);
    });

* ajax itu asynchronous