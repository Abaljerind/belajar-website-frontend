* Tailwind CSS -> sebuah utility-first framework yang mempunyai banyak class. utility-first adalah sebuah class yang berfungsi untuk melakukan persis 1 hal saja, 
    contoh: 
        .p-6 {
            padding: 1.5rem;
        }
    untuk memberikan padding sebesar 1.5rem, jadi isinya hanya 1 property css saja sesuai namanya, tidak lebih dari itu. Tailwind CSS juga bisa membantu kita membuat website modern tanpa harus meninggalkan HTML kita, jadi tidak perlu membuat file css.

* Berikut beberapa utility nya:
    - Preflight, mirip dengan css reset
    - layout
    - flexbox & grid
    - spacing & sizing
    - typhography
    - background & borders
    - effect & filters
    - transition, transformation & animation
    - tables
    - dll.

* Berikut fitur fitur unggulan dari Tailwind:
    - interactivity, memberi interaksi pada website dengan utility class nya.
    - responsive design, responsive halaman website
    - dark mode, dengan mudah dapat ditambahkan
    - reusability, ketika elemen html nya ingin dipakai berulang kali
    - custom styles
    - functions & directives

* Untuk bisa menggunakan Tailwind, kita harus memahami mengenai npm (node.js). Berikut sedikit materi mengenai npm:
    * NPM (Node Package Manager) -> sebuah tempat dimana programmer node.js bisa menyimpan module module mereka, dan karena disimpan di npm, kita juga bisa menggunakan module module tersebut. Bisa cek di www.npmjs.com. Untuk menggunakan suatu package dari npm, kita bisa gunakan perintah install,
        Contoh install:
            npm i validator || npm install validator

        Contoh uninstall:
            npm uninstall validator

        Cara menggunakan package nya bisa dilihat dari halaman yang ada di website npmjs nya itu sendiri, berikut contoh penggunaan validator:

            const validator = require('validator');
            console.log(validator.isEmail('naruto@gmail.com'));
            // output: true
            // output akan false jika '@' nya dihilangkan, atau domainnya bukan 'com' tapi misalnya 'c' atau yang asal asalan maka juga akan false.

            const validator diatas untuk menampung package validator nya, lalu dibaris selanjutnya, dengan menggunakan nama const nya kita cek dengan fungsi 'isEmail' nilai yang ada di dalam tanda kurung nya yaitu 'naruto@gmail.com'. Ada banyak fungsi yang ada didalam 'validator' package tersebut, bisa dicek di halaman npmjs nya.
        
        Inti penggunaan package package di dalam npmjs adalah kita harus membaca dokumentasi dari tiap tiap package yang ingin kita gunakan.

* Installasi Tailwind ada banyak cara, tapi cara yang mudah ada 2:
    - Tailwind cli,
    - play cdn, Disarankan digunakan hanya pada saat proses pengembangan (dev) saja. Karena size dari file yang diload itu sekitar 500kb jadi bisa membebani kinerja loading web nya.
 Keduanya bisa di cek di dokumentasi web nya.

** Untuk menggunakan cara yang 'play CDN', kita hanya perlu menambah script berikut, '<script src="https://cdn.tailwindcss.com"></script>' dibagian head, lalu kita buat file kosong dengan nama 'tailwind.config.js' dan sudah bisa langsung digunakan.

** Sebelum melakukan installasi tailwindcss, dikarenakan kita menggunakan 'npm' maka kita harus melakukan init dulu pada folder yang akan kita gunakan dengan perintah 'npm init -y', -y akan mengisi nilai yang diminta secara default oleh npm nya sendiri.

* Setelah kita lakukan installasi Tailwind dengan cli, lalu kita jalankan perintah 'npx tailwindcss init', maka akan dibuatkan secara otomatis file tailwind.config.js untuk kita gunakan melakukan konfigurasi. Yang perlu kita ubah 'saat ini' adalah bagian 'content' saja. Berikut cara baca config content dari website Tailwind nya, 

    - [NOTE: Perlu diingat bahwa ini hanya salah satu cara menulis isi dari content saja.]
    
    module.exports = {
      content: ["./src/**/*.{html,js}"], -> digunakan untuk kasih tau file web kita ada dimana.
     
      Cara baca: 
        ./ adalah root nya
        /src/ adalah difolder apa nanti kita simpan
        /**/ akan mengecek semua folder yang ada didalam src nya
        /*.{html,js} akan mengecek semua file yang ada didalam nya juga selama ekstensi file nya 'html' dan 'js'

    - Tapi, kalau kita hanya punya 1 file index.html saja yang ada didalam folder yang sama dengan file config tailwindcss kita, maka kita cukup menuliskan isi content nya begini saja:
        content: ['./index.html'],

    Untuk config selanjutnya bisa dicek di dokumentasi website nya.

* Penjelasan mengenai langkah ketiga installasi tailwindcss dari website nya:

    @tailwind base;
    /* base digunakan untuk mereset css */
    
    @tailwind components;
    /* components, tailwind akan meminta components didalam library nya, seperti container, grid system, dll */
    
    @tailwind utilities;
    /* tailwind akan memanggil directives utilities yang isinya class class utility yang nantinya akan kita gunakan */

    /* jadi nantinya ini akan dijalankan lebih dulu sebelum nantinya akan dibuat sebuah file css baru yang file tersebut akan digunakan oleh web kita.

    Untuk saat ini, kita hanya butuh 3 saja, tetapi kedepannya kalo kita punya component yang kita buat sendiri / konfigurasi lain bisa ditaruh disini

    */

* Setelah menjalankan langkah ketiga diatas, selanjutnya kita akan menjalankan build process untuk membuat file css yang akan digunakan oleh web kita. Kode dibawah dijalankan 'di terminal'. Perlu diingat bahwa lokasinya berbeda antara kode dibawah ini dengan lokasi file input.css milik kita, jadi harap diperhatikan.
    npx tailwindcss -i ./src/input.css -o ./dist/output.css --watch

    file output.css diatas nantinya akan dibuat secara otomatis setelah kode dijalankan. Setelah dijalankan, nantinya diterminal vs code kita, kode tadi akan terus dijalankan jadi dibiarkan saja, nah kita bisa cek ada file output.css yang bisa kita hubungkan dan gunakan ke file index.html kita.

    berikut contoh yang saya gunakan untuk latihan-1-sederhana:
        npx tailwindcss -i ./input.css -o ./output.css --watch

* Kalau mau rapih file file yang kita gunakan, kita bisa buat folder 'src' yang mana bisa kita letakkan file 'input.css', kita juga bisa buat folder 'css' didalam src nya dan letakkan file 'input.css' di dalam css. Lalu file index.html juga bisa kita masukkan ke folder 'public', karena prosesnya diulangi maka file 'output.css' bisa kita delete. 

    Berikut adalah config baru yang file file nya sudah dirapihkan:

    module.exports = {
      content: ["./public/**/*.{html,js}"],

    npx tailwindcss -i ./src/css/input.css -o ./public/css/style.css --watch

* Langkah terakhir setelah build process, adalah menghubungkan file index.html dengan file style.css / 'nama file output' yang kita buat saat build process. Dan akhirnya kita sudah bisa menggunakan tailwindcss lewat file html nya.

** PENTING: Kalau kita ga mau mengetikkan kode untuk process build yang panjang, yang kodenya berikut ini:
    npx tailwindcss -i ./src/css/input.css -o ./public/css/style.css --watch

    Kita bisa buka file 'package.json' lalu dibagian scripts kita tambahkan baris berikut:

    "scripts": {
        "dev": "npx tailwindcss -i ./src/css/input.css -o ./public/css/style.css --watch",
        "test": "echo \"Error: no test specified\" && exit 1"
    },

    Untuk yang "test" bisa dihapus saja tidak apa apa, lalu untuk menjalankannya di terminal, kita hanya perlu ketikkan 'npm run dev' dan voila perintah nya akan dijalankan sama seperti kode yang kita ketikkan secara manual sebelumnya.

** Terakhir, karna saat proses pembuatan website kita biasanya ada dalam mode dev, dan file style.css / output hasil build process nya masih besar ukurannya (tergantung seberapa banyak style yang kita gunakan, walaupun ukurannya masih kecil seperti 10kb / 15kb) karena didalamnya ada banyak kode css yang tidak kita gunakan juga, maka kita bisa lakukan 'minified', dengan cara jalankan perintah berikut diterminal:
    npx tailwindcss -o ./public/css/final.css --minify

 NOTE: minified hanya digunakan jika kita sudah selesai membuat website kita. Lalu jangan lupa juga untuk 'mengganti nama file css yang ada di file index.html kita'.

* Contoh penggunaan utility Bagian 'Spacing' dan 'customization utility' (class) yang tidak ada di tailwindcss

    - contoh margin:
    <div class="m-13">Margin</div>
        untuk memberikan minus (-), kita bisa tambahkan tanda - nya didepan seperti contoh diatas.

        kalau kita ingin menggunakan suatu nilai yang tidak disediakan oleh tailwind nya, kita bisa menambahkan kustomisasi di file 'tailwind.config.js' nya di dalam extend: {} yang dibungkus oleh theme: {}, dengan 'nama utility yang kita ingin tambah nilainya'. Misalnya kita ingin menggunakan margin yang lebar name nya itu 13 (m-13 jadinya), tetapi karena tidak disediakan oleh tailwind, maka kita bisa gunakan contoh berikut:
            
            module.exports = {
                theme: {
                    extend: {
                    spacing: {
                        '13': '3.25rem',
                        '15': '3.75rem',
                        '128': '32rem',
                        '144': '36rem',
                    }
                    }
                }
            }

    - Untuk padding, kita tidak bisa menggunakan nilai minus ( - ) dan juga tidak ada auto, tetapi margin punya nilai minus ( - ) dan punya nilai auto untuk membuat elemen ke tengah tengah halaman.
        Contoh padding:
            <div class="p-8">Padding</div>

    - Space Between, hanya bisa digunakan jika display nya flex
        Contoh Space Between:
            <div class="flex space-x-4 ...">
                <div>01</div>
                <div>02</div>
                <div>03</div>
            </div>


* Contoh penggunaan utility Bagian 'Sizing' terdapat beberapa utility berikut:

    - Width, 
    - Min-Width
    - Max-Width
    - Height
    - Min-Height
    - Max-Height

    Berikut contoh kodenya:
        <h2>Sizing</h2>
        <div class="w-32 h-32">Kotak 1</div>
        w-32 artinya lebarnya 32 / 8 rem, untuk h-32 artinya tingginya 32 / 8 rem

        <div class="max-w-xs min-h-screen">Kotak 2</div>
        max-w-xs diatas artinya ukuran maksimum untuk lebar elemennya yang nilainya sebesar 20rem, dan min-h-screen artinya tinggi nya selalu 100% dari viewport height nya, nilainya min-height: 100vh;

* Contoh penggunaan utility Bagian 'Typhography' terdapat beberapa utility berikut:

    - font family, untuk menambahkan font baru yang tidak disediakan oleh tailwindcss, kita bisa menambahkannya seperti biasa, copy link font yang diinginkan dari google fonts misalnya atau dari web lain, lalu paste di file index.html 'sebelum' script tailwind nya. Setelah itu kita bisa menambahkan di file 'tailwind.config.js' di bagian extend di dalam theme, berikut contohnya:
        
        theme: {
            extend: {
                spacing: {
                    13: "3.25rem",
                },
                fontFamily: {
                    inter: ["Inter"], // kata 'inter' akan menjadi key, dan valuenya ["Inter"] sesuai yang ada di google fonts.
                },
            },
        },

    Berikut contoh penggunaan nya:
        <section class="mb-96 font-inter max-w-3xl mx-auto">

    - font size
    - font smoothing
    - font style
    - font weight
    - dll, bisa cek di dokumentasinya

* Contoh penggunaan utility Bagian 'Colors' itu terbagi menjadi 3 bagian:
    - text-color, warna pada text-color ini tidak begitu lengkap, lalu diawali dengan text- untuk penggunaan nya.

    - background-color, warna pada background-color juga tidak begitu lengkap, lalu diawali dengan bg- untuk penggunaan nya.

    - colors pada Bagian Customization, terdapat warna yang banyak dari yang versi terang hingga versi gelapnya, lalu untuk penggunaan nya diawali bisa diawali dengan text- dan juga bg-

    Contoh:
        <span class="bg-gradient-to-r from-blue-500 to-teal-400 bg-clip-text text-transparent">TailwindCSS</span>
    Pada colors juga kita bisa memberikan utility gradient seperti diatas, utility dapat ditemukan di Bagian Backgrounds, di sub 'Gradient Color Stops'. Cara baca kode diatas, 'bg-gradient-to-r' itu untuk menentukan arahnya ke arah kanan (right), bisa kearah lain seperti tr (top-right), br (bottom-right) dll. Lalu 'from-blue-500' untuk titik awal warna nya dari sebelah kiri. Lalu 'to-teal-400' untuk titik akhir warna nya yang ada di sebelah kanan. Sebenarnya kita bisa menyisipkan warna ditengah tengah kedua warna tersebut, dengan menambahkan 'via-red-300' misalnya. Lalu untuk 'bg-clip-text' digunakan agar warna nya dapat menyatu dengan text nya lewat background / latarnya, dan dengan ditambah 'text-transparent' maka warna yang diluar text akan hilang sehingga text nya akan berwarna gradient tersebut.

    Dibawah ini juga beberapa contoh dari penggunaan colors nya;
        <section class="mb-10 bg-gradient-to-br from-indigo-200 via-red-400 to-yellow-300">

        <section class="mb-10 bg-green-200">

        <div class="mb-4 text-lg text-gray-500">