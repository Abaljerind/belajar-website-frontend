* Tailwind CSS -> sebuah utility-first framework yang mempunyai banyak class. utility-first adalah sebuah class yang berfungsi untuk melakukan persis 1 hal saja, 
    contoh: 
        .p-6 {
            padding: 1.5rem;
        }
    untuk memberikan padding sebesar 1.5rem, jadi isinya hanya 1 property css saja sesuai namanya, tidak lebih dari itu. Tailwind CSS juga bisa membantu kita membuat website modern tanpa harus meninggalkan HTML kita, jadi tidak perlu membuat file css.

* Berikut beberapa utility nya:
    - Preflight, mirip dengan css reset
    - layout
    - flexbox & grid
    - spacing & sizing
    - typhography
    - background & borders
    - effect & filters
    - transition, transformation & animation
    - tables
    - dll.

* Berikut fitur fitur unggulan dari Tailwind:
    - interactivity, memberi interaksi pada website dengan utility class nya.
    - responsive design, responsive halaman website
    - dark mode, dengan mudah dapat ditambahkan
    - reusability, ketika elemen html nya ingin dipakai berulang kali
    - custom styles
    - functions & directives

* Untuk bisa menggunakan Tailwind, kita harus memahami mengenai npm (node.js). Berikut sedikit materi mengenai npm:
    * NPM (Node Package Manager) -> sebuah tempat dimana programmer node.js bisa menyimpan module module mereka, dan karena disimpan di npm, kita juga bisa menggunakan module module tersebut. Bisa cek di www.npmjs.com. Untuk menggunakan suatu package dari npm, kita bisa gunakan perintah install,
        Contoh install:
            npm i validator || npm install validator

        Contoh uninstall:
            npm uninstall validator

        Cara menggunakan package nya bisa dilihat dari halaman yang ada di website npmjs nya itu sendiri, berikut contoh penggunaan validator:

            const validator = require('validator');
            console.log(validator.isEmail('naruto@gmail.com'));
            // output: true
            // output akan false jika '@' nya dihilangkan, atau domainnya bukan 'com' tapi misalnya 'c' atau yang asal asalan maka juga akan false.

            const validator diatas untuk menampung package validator nya, lalu dibaris selanjutnya, dengan menggunakan nama const nya kita cek dengan fungsi 'isEmail' nilai yang ada di dalam tanda kurung nya yaitu 'naruto@gmail.com'. Ada banyak fungsi yang ada didalam 'validator' package tersebut, bisa dicek di halaman npmjs nya.
        
        Inti penggunaan package package di dalam npmjs adalah kita harus membaca dokumentasi dari tiap tiap package yang ingin kita gunakan.

* Installasi Tailwind ada banyak cara, tapi cara yang mudah ada 2:
    - Tailwind cli,
    - play cdn, Disarankan digunakan hanya pada saat proses pengembangan (dev) saja. Karena size dari file yang diload itu sekitar 500kb jadi bisa membebani kinerja loading web nya.
 Keduanya bisa di cek di dokumentasi web nya.

** Untuk menggunakan cara yang 'play CDN', kita hanya perlu menambah script berikut, '<script src="https://cdn.tailwindcss.com"></script>' dibagian head, lalu kita buat file kosong dengan nama 'tailwind.config.js' dan sudah bisa langsung digunakan.

** Sebelum melakukan installasi tailwindcss, dikarenakan kita menggunakan 'npm' maka kita harus melakukan init dulu pada folder yang akan kita gunakan dengan perintah 'npm init -y', -y akan mengisi nilai yang diminta secara default oleh npm nya sendiri.

* Setelah kita lakukan installasi Tailwind dengan cli, lalu kita jalankan perintah 'npx tailwindcss init', maka akan dibuatkan secara otomatis file tailwind.config.js untuk kita gunakan melakukan konfigurasi. Yang perlu kita ubah 'saat ini' adalah bagian 'content' saja. Berikut cara baca config content dari website Tailwind nya, 

    - [NOTE: Perlu diingat bahwa ini hanya salah satu cara menulis isi dari content saja.]
    
    module.exports = {
      content: ["./src/**/*.{html,js}"], -> digunakan untuk kasih tau file web kita ada dimana.
     
      Cara baca: 
        ./ adalah root nya
        /src/ adalah difolder apa nanti kita simpan
        /**/ akan mengecek semua folder yang ada didalam src nya
        /*.{html,js} akan mengecek semua file yang ada didalam nya juga selama ekstensi file nya 'html' dan 'js'

    - Tapi, kalau kita hanya punya 1 file index.html saja yang ada didalam folder yang sama dengan file config tailwindcss kita, maka kita cukup menuliskan isi content nya begini saja:
        content: ['./index.html'],

    Untuk config selanjutnya bisa dicek di dokumentasi website nya.

* Penjelasan mengenai langkah ketiga installasi tailwindcss dari website nya:

    @tailwind base;
    /* base digunakan untuk mereset css */
    
    @tailwind components;
    /* components, tailwind akan meminta components didalam library nya, seperti container, grid system, dll */
    
    @tailwind utilities;
    /* tailwind akan memanggil directives utilities yang isinya class class utility yang nantinya akan kita gunakan */

    /* jadi nantinya ini akan dijalankan lebih dulu sebelum nantinya akan dibuat sebuah file css baru yang file tersebut akan digunakan oleh web kita.

    Untuk saat ini, kita hanya butuh 3 saja, tetapi kedepannya kalo kita punya component yang kita buat sendiri / konfigurasi lain bisa ditaruh disini

    */

* Setelah menjalankan langkah ketiga diatas, selanjutnya kita akan menjalankan build process untuk membuat file css yang akan digunakan oleh web kita. Kode dibawah dijalankan 'di terminal'. Perlu diingat bahwa lokasinya berbeda antara kode dibawah ini dengan lokasi file input.css milik kita, jadi harap diperhatikan.
    npx tailwindcss -i ./src/input.css -o ./dist/output.css --watch

    file output.css diatas nantinya akan dibuat secara otomatis setelah kode dijalankan. Setelah dijalankan, nantinya diterminal vs code kita, kode tadi akan terus dijalankan jadi dibiarkan saja, nah kita bisa cek ada file output.css yang bisa kita hubungkan dan gunakan ke file index.html kita.

    berikut contoh yang saya gunakan untuk latihan-1-sederhana:
        npx tailwindcss -i ./input.css -o ./output.css --watch

* Kalau mau rapih file file yang kita gunakan, kita bisa buat folder 'src' yang mana bisa kita letakkan file 'input.css', kita juga bisa buat folder 'css' didalam src nya dan letakkan file 'input.css' di dalam css. Lalu file index.html juga bisa kita masukkan ke folder 'public', karena prosesnya diulangi maka file 'output.css' bisa kita delete. 

    Berikut adalah config baru yang file file nya sudah dirapihkan:

    module.exports = {
      content: ["./public/**/*.{html,js}"],

    npx tailwindcss -i ./src/css/input.css -o ./public/css/style.css --watch

* Langkah terakhir setelah build process, adalah menghubungkan file index.html dengan file style.css / 'nama file output' yang kita buat saat build process. Dan akhirnya kita sudah bisa menggunakan tailwindcss lewat file html nya.

** PENTING: Kalau kita ga mau mengetikkan kode untuk process build yang panjang, yang kodenya berikut ini:
    npx tailwindcss -i ./src/css/input.css -o ./public/css/style.css --watch

    Kita bisa buka file 'package.json' lalu dibagian scripts kita tambahkan baris berikut:

    "scripts": {
        "dev": "npx tailwindcss -i ./src/css/input.css -o ./public/css/style.css --watch",
        "test": "echo \"Error: no test specified\" && exit 1"
    },

    Untuk yang "test" bisa dihapus saja tidak apa apa, lalu untuk menjalankannya di terminal, kita hanya perlu ketikkan 'npm run dev' dan voila perintah nya akan dijalankan sama seperti kode yang kita ketikkan secara manual sebelumnya.

** Terakhir, karna saat proses pembuatan website kita biasanya ada dalam mode dev, dan file style.css / output hasil build process nya masih besar ukurannya (tergantung seberapa banyak style yang kita gunakan, walaupun ukurannya masih kecil seperti 10kb / 15kb) karena didalamnya ada banyak kode css yang tidak kita gunakan juga, maka kita bisa lakukan 'minified', dengan cara jalankan perintah berikut diterminal:
    npx tailwindcss -o ./public/css/final.css --minify

 NOTE: minified hanya digunakan jika kita sudah selesai membuat website kita. Lalu jangan lupa juga untuk 'mengganti nama file css yang ada di file index.html kita'.

* Contoh penggunaan utility Bagian 'Spacing' dan 'customization utility' (class) yang tidak ada di tailwindcss

    - contoh margin:
    <div class="m-13">Margin</div>
        untuk memberikan minus (-), kita bisa tambahkan tanda - nya didepan seperti contoh diatas.

        kalau kita ingin menggunakan suatu nilai yang tidak disediakan oleh tailwind nya, kita bisa menambahkan kustomisasi di file 'tailwind.config.js' nya di dalam extend: {} yang dibungkus oleh theme: {}, dengan 'nama utility yang kita ingin tambah nilainya'. Misalnya kita ingin menggunakan margin yang lebar name nya itu 13 (m-13 jadinya), tetapi karena tidak disediakan oleh tailwind, maka kita bisa gunakan contoh berikut:
            
            module.exports = {
                theme: {
                    extend: {
                    spacing: {
                        '13': '3.25rem',
                        '15': '3.75rem',
                        '128': '32rem',
                        '144': '36rem',
                    }
                    }
                }
            }

    - Untuk padding, kita tidak bisa menggunakan nilai minus ( - ) dan juga tidak ada auto, tetapi margin punya nilai minus ( - ) dan punya nilai auto untuk membuat elemen ke tengah tengah halaman.
        Contoh padding:
            <div class="p-8">Padding</div>

    - Space Between, hanya bisa digunakan jika display nya flex
        Contoh Space Between:
            <div class="flex space-x-4 ...">
                <div>01</div>
                <div>02</div>
                <div>03</div>
            </div>


* Contoh penggunaan utility Bagian 'Sizing' terdapat beberapa utility berikut:

    - Width, 
    - Min-Width
    - Max-Width
    - Height
    - Min-Height
    - Max-Height

    Berikut contoh kodenya:
        <h2>Sizing</h2>
        <div class="w-32 h-32">Kotak 1</div>
        w-32 artinya lebarnya 32 / 8 rem, untuk h-32 artinya tingginya 32 / 8 rem

        <div class="max-w-xs min-h-screen">Kotak 2</div>
        max-w-xs diatas artinya ukuran maksimum untuk lebar elemennya yang nilainya sebesar 20rem, dan min-h-screen artinya tinggi nya selalu 100% dari viewport height nya, nilainya min-height: 100vh;

* Contoh penggunaan utility Bagian 'Typhography' terdapat beberapa utility berikut:

    - font family, untuk menambahkan font baru yang tidak disediakan oleh tailwindcss, kita bisa menambahkannya seperti biasa, copy link font yang diinginkan dari google fonts misalnya atau dari web lain, lalu paste di file index.html 'sebelum' script tailwind nya. Setelah itu kita bisa menambahkan di file 'tailwind.config.js' di bagian extend di dalam theme, berikut contohnya:
        
        theme: {
            extend: {
                spacing: {
                    13: "3.25rem",
                },
                fontFamily: {
                    inter: ["Inter"], // kata 'inter' akan menjadi key, dan valuenya ["Inter"] sesuai yang ada di google fonts.
                },
            },
        },

    Berikut contoh penggunaan nya:
        <section class="mb-96 font-inter max-w-3xl mx-auto">

    - font size
    - font smoothing
    - font style
    - font weight
    - dll, bisa cek di dokumentasinya

* Contoh penggunaan utility Bagian 'Colors' itu terbagi menjadi 3 bagian:
    - text-color, warna pada text-color ini tidak begitu lengkap, lalu diawali dengan text- untuk penggunaan nya.

    - background-color, warna pada background-color juga tidak begitu lengkap, lalu diawali dengan bg- untuk penggunaan nya.

    - colors pada Bagian Customization, terdapat warna yang banyak dari yang versi terang hingga versi gelapnya, lalu untuk penggunaan nya diawali bisa diawali dengan text- dan juga bg-

    Contoh:
        <span class="bg-gradient-to-r from-blue-500 to-teal-400 bg-clip-text text-transparent">TailwindCSS</span>
    Pada colors juga kita bisa memberikan utility gradient seperti diatas, utility dapat ditemukan di Bagian Backgrounds, di sub 'Gradient Color Stops'. Cara baca kode diatas, 'bg-gradient-to-r' itu untuk menentukan arahnya ke arah kanan (right), bisa kearah lain seperti tr (top-right), br (bottom-right) dll. Lalu 'from-blue-500' untuk titik awal warna nya dari sebelah kiri. Lalu 'to-teal-400' untuk titik akhir warna nya yang ada di sebelah kanan. Sebenarnya kita bisa menyisipkan warna ditengah tengah kedua warna tersebut, dengan menambahkan 'via-red-300' misalnya. Lalu untuk 'bg-clip-text' digunakan agar warna nya dapat menyatu dengan text nya lewat background / latarnya, dan dengan ditambah 'text-transparent' maka warna yang diluar text akan hilang sehingga text nya akan berwarna gradient tersebut.

    Dibawah ini juga beberapa contoh dari penggunaan colors nya;
        <section class="mb-10 bg-gradient-to-br from-indigo-200 via-red-400 to-yellow-300">

        <section class="mb-10 bg-green-200">

        <div class="mb-4 text-lg text-gray-500">

*** PENTING: Jika diatas tadi dijelaskan bahwa kalau ada value dari utility yang disediakan oleh TailwindCSS tidak tersedia, maka kita harus membuat utility custom sendiri, TETAPI perlu diingat, kita hanya butuh custom utility tersebut 'hanya dan jika' utility nya akan kita gunakan lebih dari 1 kali.
    Jadi Kalau custom utility nya hanya digunakan 1 kali saja, kita bisa menggunakan yang namanya arbitrary / nilai sembarang / nilai custom buatan kita sendiri menggunakan kurung siku [], berikut contohnya:

        <div class="max-w-xl h-96 bg-[#bada55] mx-auto mt-[42px]"></div>


* Contoh penggunaan utility Bagian 'Background':
    - Background Attachment, ada 3 value:
        - bg-local, misal ada elemen p yang isinya tulisan yang panjang di dalam image yang ukurannya kotak, saat kita berikan kotak tersebut efek overflow-scroll maka tulisan dan gambar / image nya akan menempel sehingga saat di scroll gambarnya akan ikut bergerak bersamaan dengan tulisannya, jika tulisannya cukup panjang maka gambarnya akan di repeat sepanjang tulisannya.
        
        - bg-scroll, adalah kebalikan dari bg-local dan juga sama seperti overflow-y-scroll, dimana tulisannya akan bisa discroll tapi gambarnya diam ditempat.

        - bg-fixed, sedikit mirip dengan bg-scroll, tetapi bedanya jika kita scroll diluar dari gambarnya maka gambarnya juga akan ikut bergerak seperti discroll juga walaupun sedikit, mirip seperti efek paralax.
    
    - Background Size, ada 3 value:
        - bg-auto, menampilkan gambar dengan ukuran sesuai size nya.
        - bg-cover, menampilkan gambar dengan melakukan scale (memperbesar / memperkecil) gambar nya sampai memenuhi semua background.
        - bg-contain, menampilkan gambar dengan melakukan scale pada background image sampai gambarnya memenuhi salah satu sisi dari elemennya tanpa melakukan crop / stretch.

    - Background Repeat, ada 6 value:
        - bg-repeat,
        - bg-no-repeat, tidak ada repeat sama sekali.
        - bg-repeat-x,
        - bg-repeat-y,
        - bg-repeat-round,
        - bg-repeat-space,

    - Background Position, ada banyak:
        - bg-bottom, gambar akan menempel kebawah
        - bg-center, gambar akan menempel ketengah tengah
        - bg-left, gambar akan menempel ke kiri
        - bg-right, gambar akan menempel ke kanan
        - bg-top, gambar akan menempel ke atas
        - dll

    - Background Clip,
    - Background Color, 
    - Background Origin,
    - Gradient Color Stops,

* Contoh penggunaan utility Bagian 'Borders':
    - Border-radius,
    - Border-width,
    - Border-color,
    - Border-style,
    - Divide-width, digunakan ketika kita ingin membuat banyak elemen sekaligus yang punya batasnya.
    - Outline-width, area diluar border atau garis tepi.
    - Ring-width, seolah olah kita memberikan efek box-shadow
    - Ring-color, agar Ring-width nya bisa kita berikan warna.
    - dll

* Contoh penggunaan utility Bagian 'Effects':

    - Box shadow,
    - Box shadow color,
    - Opacity,
    - Mix Blend mode, efek menggabungkan warna antara warna elemen dengan background nya, atau bisa dibilang bahwa elemen didepannya ngeblend (menyatu) dengan backgroundnya. Untuk mix blend mode, digunakan pada elemen yang ada didepan backgroundnya. Isinya ada:

        - mix-blend-multiply, membuat efek seolah olah elemen yang ada didepan background nya memberikan efek multiply ke backgroundnya, berikut contohnya:
            <div class="mt-32 max-w-xl mx-auto h-96 bg-slate-300 bg-contain bg-no-repeat bg-center rounded-2xl shadow-xl shadow-slate-500 overflow-hidden border-8" style="background-image: url(./img/1.jpg)">
                <div class="w-full h-full bg-blue-300 'mix-blend-multiply'"></div>
            </div>
        
        - mix-blend-screen,
        - mix-blend-overlay,
        - mix-blend-darken,
        - dll.

    - Background Blend mode, mirip dengan mix blend mode, tetapi bedanya dari background-image ngeblend (menyatu) ke background-color nya. Mirip semacam filter pada efek kamera di hp. Untuk background blend mode, digunakan pada background nya.
        
        Contohnya:
            <div class="mt-32 max-w-xl mx-auto h-96 bg-slate-300 bg-contain bg-no-repeat bg-center rounded-2xl shadow-xl shadow-slate-500 overflow-hidden border-8 'bg-blend-overlay'" style="background-image: url(./img/1.jpg)">
                <div class="w-full h-full bg-blue-300"></div>
            </div>

* Contoh penggunaan utility Bagian 'Filters', memberikan efek ke sebuah elemen:
    - blur, blur-sm hover:blur-none
    - brightness, 100 itu normal, dibawah 100 jadi lebih gelap, diatas 100 jadi lebih terang.
    - contrast,
    - drop shadow,
    - backdrop blur, memberikan efek blur didepan elemen lain, yang biasanya background image. Jadi backdrop blur digunakan pada elemen yang ada didepan background.
    - dll.

*** NOTE: untuk memposisikan suatu elemen berada ditengah tengah halaman / elemen lain, kita bisa memberikan display flex pada pembungkus / parentnya, lalu gunakan 'm-auto'.

* Pseudo-class & Dark mode,

    *NOTE: untuk membuat elemen button berada ditengah, buat display nya menjadi block dulu, karna default display nya adalah inline. Berarti 'semua elemen html yang display nya inline bisa kita letakkan ditengah jika kita ganti display nya menjadi block dulu' lalu berikan 'margin pada sumbu x auto'.

    - Biasanya pada Pseudo-class ada 3 yang sering kita gunakan, yaitu: hover, active, focus, ada juga yang lain seperti First, last, odd, even, form states dan lain lain pada TailwindCSS.  Selain Pseudo-class ada juga Pseudo-elemen, media and feature queries, attribute selectors, dan custom modifiers pada TailwindCSS.

        Berikut contohnya:
            <button class="my-10 bg-sky-500 px-5 py-2 rounded-full text-white font-semibold font-inter mx-auto block hover:bg-sky-600 active:bg-sky-700 focus:ring focus:ring-sky-300">Simpan</button>

    - Grouping, bagaimana caranya kita mau memberikan sebuah style pada elemen ketika elemen parentnya yang kita kasih Pseudo-class. Di dokumentasi TailwindCSS disebutnya sebagai 'Styling based on parent state.
        Berikut contohnya:
            <div class="max-w-lg my-10 border border-slate-200 rounded-xl mx-auto p-5 shadow-md font-inter hover:bg-sky-500 group">
                <h5 class="font-bold text-slate-700 text-lg mb-3 group-hover:text-white">My Card</h5>
                <p class="text-slate-600 group-hover:text-white">
                    Lorem ipsum dolor sit amet consectetur, adipisicing elit. Eius, quidem officiis nemo error aliquam ipsum repudiandae atque eos non porro velit excepturi dolorem sapiente quasi ab reprehenderit ullam distinctio minus.
                </p>
            </div>

        Untuk menggunakan grouping ini, kita harus berikan dulu nama 'group' pada elemen parent nya, untuk contoh diatas, group diberikan pada elemen 'div'. Lalu pada elemen child / anaknya kita gunakan 'group-hover:<utility nya mau apa>', kalau contoh diatas, pada 'tag h5 dan p', kita berikan 'group-hover:text-white', efeknya nanti saat kursor masuk ke dalam elemen div (parentnya) warna text nya akan berubah jadi putih.

    - Highlighted text, jadi kita bisa mengganti perilaku ketika kita menyorot (klik kanan pada mouse dan tahan) / menyeleksi text dalam halaman kita.
        Contohnya:
            <p class="text-slate-600 group-hover:text-white selection:bg-lime-300 selection:text-slate-900">
        
        Pada saat text di seleksi dengan mouse, maka warna background yang biasanya biru, akan berubah menjadi warna lime dan warna text nya juga berubah menjadi warna abu abu gelap / slate.

    - First-line and first-letter, untuk mengubah baris pertama / huruf pertama dari suatu paragraf. Berikut contohnya:
        <p class="text-slate-600 group-hover:text-white selection:bg-lime-300 selection:text-slate-900 first-line:uppercase first-line:tracking-widest first-letter:text-7xl first-letter:float-left first-letter:mr-3">

        first-line:uppercase akan mengubah baris pertama menjadi huruf kapital semua. Lalu first-line:tracking-widest akan memberikan ruang / melebarkan baris pertamanya. first-letter:text-7xl akan mengubah huruf pertama menjadi sebesar 72px. Lalu first-letter:float-left akan mengubah huruf pertama agar dapat dikelilingi oleh text yang lain. Terakhir first-letter:mr-3 untuk memberikan jarak ke arah kanan sebesar 12px.

    - Memberikan style pada sebuah elemen input bisa menggunakan before & after atau placeholder text. Contohnya bisa dilihat di file index.html dibagian 'contoh styling pada elemen input'. 

        *Note: efek pseudo-class juga bisa ditumpuk menjadi satu jika ada elemen yang ingin kita berikan efek pseudo-class. Contoh:
            invalid:focus:ring-pink-700 -> invalid: adalah pseudo-class khusus pada elemen input. Invalid digunakan untuk memberikan semacam efek warning pada elemen input ketika nilai yang dimasukkan ke dalam input tidak sesuai dengan type input nya.

* Peer dengan sibling, kalau tadi ada grouping dengan parent, maka sekarang ada Peer dengan sibling, yaitu elemen disebelahnya. Ini di TailwindCSS nya disebutnya 'Styling based on sibling state' yaitu perubahan style ketika elemen siblingnya / sodaranya (bersebelahan di html nya). Peer itu artinya elemen yang 1 level sebelah sebelahan. 
    - Cara menggunakan peer / Styling based on sibling state ini, pertama dengan memberikan elemen disebelahnya (kiri / kanan) class "peer", lalu di elemen yang ingin kita berikan stylenya tadi kita gunakan peer-<pseudo-code>:<utility>. Berikut contohnya:
        <input
            id="email"
            type="email"
            placeholder="masukkan email..."
            class="px-3 py-2 border shadow rounded w-full block text-sm placeholder-slate-400 focus:outline-none focus:ring-1 focus:ring-sky-500 focus:border-sky-500 invalid:text-pink-700 invalid:focus:ring-pink-700 invalid:focus:border-pink-700 peer"
          />
          <p class="text-sm m-1 text-pink-700 invisible peer-invalid:visible">Email tidak valid</p>
        
        Di tag input kita tambahkan class peer, lalu di tag p kita tambahkan class peer-invalid:visible yang sebelumnya kita tambahkan class invisible, jadi ketika text yang kita masukkan ke dalam input bukan bertipe email maka tag p nya akan muncul, tetapi jika text yang kita masukkan pada input bertipe email maka tag p nya akan hilang.

** Dark mode, untuk mengubah tampilan nya agar menjadi gelap. Cara penggunaannya dengan menambahkan class dark:<warna bg / text nya mau apa>, contoh: dark:bg-slate-900, lalu di tag p nya kita berikan dark:text-white atau dark:text-slate-400

    Untuk menggunakan dark mode kita perlu menambahkan 'key dark mode' pada file 'tailwind.config.js' seperti berikut:
        module.exports = {
            darkMode: "class",
            content: ["./index.html"],

    Lalu juga pada file html nya, dibagian tag html diatas kita berikan class dark seperti berikut:
        <html lang="en" class="dark">
            <head>
    Dengan menambah class dark pada tag html diatas kita bisa mengubah seluruh tampilan menjadi dark, dan kita bisa kembali ke mode light juga dengan cara menghapus 'dark' nya.

    Nah selanjutnya baru kita bisa ubah isi di dalam tag body dengan menambahkan class berikut:
        <body class="dark:bg-slate-800 dark:text-slate-200">

    Terakhir, kita bisa menambahkan pseudo-class dark: pada tag tag lain di dalam tag body, berikut contohnya:
        <button
      class="my-10 bg-sky-500 px-5 py-2 rounded-full text-white font-semibold font-inter mx-auto block hover:bg-sky-600 active:bg-sky-700 focus:ring focus:ring-sky-300 "dark:bg-slate-300 dark:text-slate-800 dark:hover:text-slate-900 dark:hover:bg-slate-100">Simpan</button>

* Utility pada Bagian "Transform", ada beberapa:
    - scale, memperbesar / memperkecil elemen, lebih kecil dari 100 elemen mengecil, lebih besar dari 100 elemen membesar.
    - rotate, memutar elemen
    - translate, mengubah posisi elemen seperti menggeser geser elemennya
    - skew, untuk membuat elemennya miring / condong
    - transform origin, mengubah sumbunya elemennya, misal pada saat kita memutar (rotate) elemen nah kita ubah origin nya / sumbu putar nya

    ** Jika kita ingin membuat efek dengan rotate, scale, dan transition yang tidak patah patah, maka kita harus membungkus elemen tersebut ke dalam elemen parent, lalu gunakan utility group, seperti contoh dibawah ini:
            
            <div class="w-40 h-40 bg-pink-500 mx-auto mt-20 group">
                <div class="w-full h-full bg-sky-500 rounded-lg shadow-lg group-hover:rotate-180 origin-top-left transition"></div>
            </div>

    Dengan menggunakan group seperti diatas, maka jika kita hover elemennya tidak akan patah patah, kenapa? karena yang kita hover adalah elemen parentnya yang diam, bukan elemen yang sendirian saja, kalau elemen diatas dipindahkan keluar dari elemen parent nya maka akan patah patah karena yang dihover sedang bergerak juga. Berikut contoh elemen yg sama tetapi tidak dibungkus oleh elemen parentnya.

        <div class="w-40 h-40 bg-sky-500 mx-auto rounded-lg shadow-lg hover:scale-125 hover:rotate-180 transition origin-top-left hover:bg-pink-500"></div>

* Utility pada Bagian "Transitions & Animation", ada beberapa:
    - transition property,
    - transition duration,
    - transition timing function,
        - ease-linear, waktunya sama dari awal sampai akhir.
        - ease-in, awalnya lambat lalu semakin cepat.
        - ease-out, awalnya cepat lalu semakin lambat.
        - ease-in-out, awalnya lambat, lalu cepat, lalu lambat lagi.
    - transition delay,
    - animation, sudah dibuatkan susunan animasinya dan juga keyframes nya.
        - animate-spin, membuat elemen yang kita pilih itu berputar secara terus menerus.
        - animate-ping, seperti fade out, jadi elemennya membesar, seperti radar.
        - animate-pulse, seperti berdenyut.
        - animate-bounce, jadinya elemennya akan memantul

        ** Jika kita kurang suka dengan animation yang disediakan, maka kita bisa buat sendiri di file tailwind.config.js seperti berikut:
            module.exports = {
                    theme: {
                        extend: {
                        animation: {
                            'spin-slow': 'spin 3s linear infinite',
                        }

        ** Kita juga bisa membuat animation kita sendiri yang berbeda dari apa yang disediakan oleh tailwindcss dengan cara yang sama yaitu 'mengedit' file tailwind.config.js nya. Seperti berikut contohnya:
        *NOTE: kita perlu membuat keyframes baru terlebih dahulu sebelum membuat animation nya.

            animation: {
                "spin-slow": "spin 3s linear infinite",
                wiggle: "goyang 1s ease-in-out infinite",
            },
            keyframes: {
                goyang: {
                "0%, 100%": { transform: "rotate(-3deg)" },
                "50%": { transform: "rotate(3deg)" },
                },
            },

* Utility pada bagian "Layout" ada banyak tapi yang dicoba sekarang hanya beberapa:
    - container, untuk memberikan lebar yang fix pada sebuah bagian / elemen. ada banyak tipenya, dari yang none, sampai 2xl, dan dengan menggunkan container ini, kita sudah bisa mendapatkan efek responsive langsung berdasarkan layarnya, walaupun kita hanya menggunakan 'container' saja tetapi efek responsive nya akan langsung mengikuti lebar dari perangkat yang digunakan.
        Contoh:
            <div class="container px-8 mx-auto">
    
    - float, agar mendapatkan efek wrapping.
        Contoh:
            <img src="img/1.jpg" alt="Komputer" width="125" class="float-left mr-3" />
    
    - position, untuk menempatkan posisi pada elemen yang kita punya. Perlu diingat jika kita memberikan suatu elemen position non static, maka kita juga harus memberikan pembungkus / elemen parentnya posisi non static juga, biasanya digunakan relative. Kita juga bisa memberikan nilai negatif dengan menambahkan tanda minus ( - ) didepan kata top, right, left / bottom.
        Contoh:
            <div class="border rounded-lg shadow-lg p-10 'relative'">
                <div class="w-10 h-10 bg-sky-200 rounded-full flex 'absolute -top-5 -right-5'"><span class="text-xl m-auto">✖️</span></div>

        Contoh position agar pas ditengah tengah elemen, dengan menambah translate yang nilainya negatif:
            <div class="border rounded-lg shadow-lg p-10 'relative'">
                <div class="w-10 h-10 bg-sky-200 rounded-full flex 'absolute -top-5 left-1/2 -translate-x-1/2' cursor-pointer"><span class="text-xl m-auto">⬆️</span></div>

        Contoh position dengan flex agar bisa kembali ke atas ketika di klik dengan tag a dan juga dengan utility 'scroll-smooth' yang diberikan pada tag html nya:
            <html lang="en" class="scroll-smooth">
                <div class="border rounded-lg shadow-lg p-10 'relative'">
                <div class="w-10 h-10 bg-sky-200 rounded-full flex 'fixed bottom-5 right-5' cursor-pointer"><a href="#" class="text-xl m-auto">⬆️</a></div>
    
    - Columns, untuk mengontrol jumlah kolom yang ada didalam suatu elemen pembungkus. Kita hanya perlu menambahkan utility dengan nama 'columns-<jumlahnya mau berapa>' saja.
        Contoh dibawah adalah suatu div yang punya 2 / lebih tag img yang kita berikan utility columns-3 yang akan membagi img nya menjadi 3 buah kolom:
            <div class="container mx-auto border rounded-lg shadow-lg p-10 mt-20 'columns-3'">
                <img src="https://source.unsplash.com/600x400" alt="Image" class="mb-4" />
                <img src="https://source.unsplash.com/600x400" alt="Image" class="mb-4" />

* Utility responsive design, bagaimana kita bisa memberikan utility utility yang berbeda saat lebar layar tertentu / di tailwind disebutnya 'breakpoint'. Berikut cara untuk memberikan responsive design agar tampilan disetiap layarnya berbeda beda:
    - Kita bisa menggunakan responsive design dengan 'prefix breakpoint' yaitu: 
        - sm (min-width: 640px), 
        - md (min-width: 768px), 
        - lg (min-width: 1024px),
        - xl (min-width: 1280px), 
        - 2xl (min-width: 1536px), 
    yang semuanya ini menggunakan minimum width dan 'bisa kita berikan pada tiap tiap utility milik tailwind nya'. Contohnya: "sm:bg-red-300" akan memberikan efek background color mulai dari lebar 640px keatas, dibawah 640px tidak akan diberikan efek background color tersebut. Kalau kita ingin beda lagi pada saat lebarnya 768px maka kita bisa tambahkan lagi prefix nya "md:bg-sky-300" sampai ke lebar yang kita inginkan. Jadi intinya yang diberikan prefix breakpoint ini adalah utility / class class nya saja.

    Jika kita hanya ingin memberikan efek responsive nya 'hanya di 1 breakpoint saja' maka kita bisa akali dengan cara berikut:
        "sm:bg-red-200 md:bg-white", ini akan membuat background color nya hanya akan berwarna merah saat dilebar 640px sampai 767px, lalu dilebar 768px background color nya akan kembali menjadi putih lagi seperti sebelum lebarnya mencapai 640px.

    ***PENTING: Konsep "Mobile first design", secara default tailwind itu menggunakan breakpoint mobile, jadi disarankan sebaiknya kita mendesign atau membuat webnya untuk mobile dulu, kalau mau ada perubahan ketika dibuka webnya dilayar yang lebih besar baru kita ubah setelahnya. Kalau kita menambahkan prefix 'sm' ini bukan berarti untuk mobile tapi untuk layar yang kecil yaitu 640px, atau jika dibuka dengan mobile, prefix 'sm' ini ada dalam versi landscape. 

        Berikut contoh lain penggunaan breakpoint untuk mendapatkan efek responsive:
    
    <div class="container px-6 font-inter max-w-md mx-auto 'sm:max-w-xl'">
      <h3 class="text-4xl font-bold text-slate-700 'sm:text-5xl'"><span class="text-sky-300">Naruto</span> Shippuden</h3>
      <img src="img/2.jpg" alt="Komputer" class="mt-4 rounded-xl shadow-xl 'sm:mt-6 sm:h-64 sm:w-full sm:object-cover sm:object-center'" />
      <h2 class="mt-6 text-2xl font-semibold text-slate-700 'sm:mt-8 sm:text-4xl'">Mari belajar ninja bersama kami!</h2>

      sm:object-cover -> sama seperti background-size:cover pada css.
      sm:object-center -> bisa diberi nilai lain yaitu top dan bottom, ini sama seperti background-position pada css.
    
    <a href="#" class="inline-block px-5 py-3 bg-red-600 text-white rounded-xl shadow-lg uppercase font-semibold tracking-wider text-sm 'sm:text-base'">Subscribe Channel Youtube</a>

        sm:text-base -> untuk mengembalikan text ke ukuran normal.

* Utility flexbox. Untuk memberikan efek flexbox, kita hanya perlu memberikan kata 'flex', nah jika di refresh halaman webnya kalau tampilan webnya berubah jadi sejajar ke kanan semua, maka kita perlu membungkus semua tag html tersebut ke dalam "div baru", kenapa? agar yang diberikan "efek flex-item" hanya '1 block div itu saja bukan semua tag html tadi yang belum dimasukkan ke dalam div baru tersebut'. Hasilnya akan berubah kembali menjadi berurutan kebawah seperti semula, yang berbeda hanya elemen elemen tag html didalamnya sudah dikelompokkan menjadi 'flex-item'. Sehingga kita bisa membuat 'flex-item' kedua dengan div baru lagi dan nantinya kita bisa mengubah urutan dengan menukar posisi kedua 'flex-item' tersebut dengan row-reverse atau column-reverse.